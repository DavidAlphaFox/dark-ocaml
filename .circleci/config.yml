version: 2.1

# Config for CI/CD pipeline

# There is a strong connection between this file and the equivalent files for
# running Dark in dev, which are scripts/builder and
# scripts/build/_build-server. Generally, if you add something to this file,
# there's an equivalent to be added in one of those files.

executors:
  simple-executor:
    docker:
      - image: cimg/base:2022.10
  in-container:
    working_directory: ~/app
    environment:
      IN_DEV_CONTAINER: true
    docker:
      # DOCKERFILE_REPO: see Dockerfile note about how this is built.
      - image: darklang/dark-base:08b5205

commands:
  show-large-files-and-directories:
    steps:
      - run:
          # show any file or directory over 50M in size
          # note alpine find doesn't support +50M here
          name: show large files and directories
          command: |
            find ~ -size +51200k -exec du -h {} \;
            du -ht 50M

  ##########################
  # Check the worktree
  ##########################
  assert-clean-worktree:
    steps:
      - run:
          name: Assert the worktree is clean
          command: "bash -c '[[ -z $(git status -s) ]] && echo Workdir is clean || { echo Workdir is not clean:; git status -s; $(exit 1); }'"

  ##########################
  # Checkout - need to remove some things for a clean checkout
  ##########################
  darkcheckout:
    steps:
      # To get ownership right when mounting volumes in local development, the
      # container adds a bunch of directories within ~/app. However, in Circle,
      # we don't use volumes and the container is loaded before the git
      # checkout, which complains if the checkout directory is not empty. So
      # let's delete those first.
      - run: rm -Rf /home/dark/app/*
      - checkout


  ##########################
  # Setup app
  ##########################
  setup-app:
    steps:
      - run:
          name: Setup build environment
          command: |
            set -x
            scripts/devcontainer/_setup-circleci-environment
            scripts/devcontainer/_create-app-directories
            scripts/devcontainer/_create-cache-directories
            scripts/devcontainer/_setup-hosts
            scripts/devcontainer/_start-background-services postgresql
            env

  ##########################
  # Deploy locks
  ##########################
  deploy-lock-remove-on-fail:
    steps:
      # Can only be used from in-container executors as it needs gcloud
      - auth-with-gcp-on-fail
      - run:
          name: Remove deploy lock
          when: on_fail
          command: |
            if [[ "${CIRCLE_BRANCH}" = "main" ]]; then
              ./scripts/deployment/deploy-lock-one-remove
            fi

  deploy-lock-remove:
    steps:
      - run:
          name: Remove deploy lock
          command: ./scripts/deployment/deploy-lock-one-remove




  ##########################
  # Slack
  ##########################
  slack-notify-failure:
    parameters:
      buildType: { type: string } # build or deploy
    steps:
      - run:
          name: Slack notification
          when: on_fail
          command: |
            curl -v -X POST -H 'Content-type: application/json' -d "{ \"success\": false, \"buildType\": \"<<parameters.buildType>>\", \"branch\": \"$CIRCLE_BRANCH\", \"url\": \"$CIRCLE_BUILD_URL\", \"prs\": \"$CIRCLE_PULL_REQUESTS\", \"sha\": \"$CIRCLE_SHA1\", \"username\": \"$CIRCLE_USERNAME\", \"job\": \"$CIRCLE_JOB\" }" https://ops-circleci.builtwithdark.com/notify-slack

  slack-notify-success:
    parameters:
      buildType: { type: string } # build or deploy
    steps:
      - run:
          name: Slack notification
          when: on_success
          command: |
            curl -v -X POST -H 'Content-type: application/json' -d "{ \"success\": true, \"buildType\": \"<<parameters.buildType>>\", \"branch\": \"$CIRCLE_BRANCH\", \"url\": \"$CIRCLE_BUILD_URL\", \"prs\": \"$CIRCLE_PULL_REQUESTS\", \"sha\": \"$CIRCLE_SHA1\", \"username\": \"$CIRCLE_USERNAME\", \"job\": \"$CIRCLE_JOB\" }" https://ops-circleci.builtwithdark.com/notify-slack

  slack-notify-job-failure:
    steps:
      - slack-notify-failure:
          buildType: "job"
  slack-notify-deploy:
    steps:
      - slack-notify-failure:
          buildType: "deploy"
      - slack-notify-success:
          buildType: "deploy"
  slack-notify-build:
    steps:
      - slack-notify-failure:
          buildType: "build"
      - slack-notify-success:
          buildType: "build"


  ##########################
  # etags
  ##########################
  regenerate-etags:
    steps:
      - run:
          name: Regenerate combined ETags
          command: |
            scripts/build/_generate-etags
            cat backend/static/etags.json
            scripts/linting/_check-etags
            cp backend/static/etags.json rundir/


  ##########################
  # Initializing the containers
  ##########################
  prep-container-creation:
    steps:
      - setup_remote_docker: { docker_layer_caching: true, version: 20.10.14 }

      # Save the docker env: type .docker-env when sshing in, then you can
      # use ./scripts/run-in-docker
      - run:
          name: Setup docker-env for debugging
          command: env | grep 'DOCKER\|NO_PROXY' | sed 's/^/export /' > ../docker-env

  build-gcp-containers:
    steps:
      - prep-container-creation
      - regenerate-etags
      - store_artifacts: { path: backend/static/etags.json }
      - run: scripts/build/compile-project shipit
      - run: scripts/deployment/shipit containers build --save-manifest=gcr-image-ids.json
      - run: cat gcr-image-ids.json
      # Test them
      - run: scripts/deployment/shipit release prepare --arg CHANGE_CAUSE="test" --manifest=gcr-image-ids.json

  ##########################
  # misc
  ##########################
  auth-with-gcp:
    parameters: { background: { type: boolean } }
    steps:
      - run:
          name: Auth with GCP
          background: << parameters.background >>
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > gcloud-service-key.json
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud auth configure-docker
            ./scripts/production/gcp-authorize-kubectl

  auth-with-gcp-on-fail:
    steps:
      - run:
          name: Auth with GCP
          when: on_fail
          command: |
            if [[ "${CIRCLE_BRANCH}" = "main" ]]; then
              echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > gcloud-service-key.json
              gcloud auth activate-service-account --key-file gcloud-service-key.json
              gcloud auth configure-docker
              ./scripts/production/gcp-authorize-kubectl
            fi



##########################
# Actual workflow
##########################
jobs:
  build-backend:
    executor: in-container
    steps:
      - darkcheckout
      - setup-app
      - restore_cache:
          keys:
            - v9-backend-{{ checksum "esy.json" }}
            - v9-backend
      - show-large-files-and-directories
      - run: scripts/build/compile-project --test backend
      - assert-clean-worktree
      # Doesn't need to be run post-build, but takes <1s to run
      - run: scripts/linting/ocaml-find-unused backend/test
      - persist_to_workspace:
          # Do this before reducing size of cache
          root: "."
          paths:
            # Just enough for integration tests and deploy
            - _build/default/backend/bin/server.exe
            - _build/default/backend/bin/garbage_collector_worker.exe
      - run:
          name: Reduce size of esy cache
          command: |
            set -x
            rm -Rf /home/dark/.esy/3/b
            # It seems like everything builds and rebuilds fine without
            # these. Other files are needed: .o, .a, .cma, .cmx.
            shopt -s globstar
            rm -f /home/dark/.esy/3/i/**/*.cmt
            rm -f /home/dark/.esy/3/i/**/*.cmti
            rm -f /home/dark/.esy/3/i/**/*.byte
            # These can be very cheaply rebuilt, and are about 400MB
            rm -f /home/dark/app/_build/default/backend/*/*.exe
      - show-large-files-and-directories
      - save_cache:
          paths:
            - _build
            - node_modules
            - /home/dark/.esy
          key: v9-backend-{{ checksum "esy.json" }}
      - store_artifacts: { path: rundir }
      - store_test_results: { path: rundir/test_results }
      - slack-notify-job-failure
      - deploy-lock-remove-on-fail

  static-checks:
    executor: in-container
    steps:
      - darkcheckout
      - run: scripts/linting/shellchecker
      - run: scripts/linting/yamllinter
      - run: scripts/formatting/format check
      - run: scripts/build/compile-project shipit
      - run: scripts/deployment/shipit validate
      - slack-notify-job-failure
      - deploy-lock-remove-on-fail

  predeployment-checks:
    executor: in-container
    steps:
      - darkcheckout
      - auth-with-gcp: { background: false }
      - run: scripts/build/compile-project shipit
      - run: scripts/deployment/shipit manual diff > /dev/null 2>&1
      - slack-notify-job-failure
      - deploy-lock-remove-on-fail

  gcp-containers-test:
    executor: in-container
    steps:
      # Just test that we can build them for now
      - darkcheckout
      - setup-app
      - attach_workspace: { at: "." }
      - build-gcp-containers
      - slack-notify-job-failure
      - deploy-lock-remove-on-fail

  push-containers-to-gcp:
    executor: in-container
    steps:
      - darkcheckout
      - setup-app
      - run: scripts/build/compile-project shipit
      - auth-with-gcp: { background: true }
      - attach_workspace: { at: "." }
      - show-large-files-and-directories
      - build-gcp-containers
      - persist_to_workspace:
          root: "."
          paths: ["gcr-image-ids.json"]
      - run: scripts/deployment/shipit containers push
      - slack-notify-job-failure
      - deploy-lock-remove-on-fail

  deploy-lock:
    # Note that it doesn't matter if the in-container executor is a bit slow: they
    # deploy according the timestamp on the commit. Even if builds add their locks in
    # the wrong order, so long as the locks are there by the time the next deploy
    # comes, they'll be in the right order.
    executor: in-container
    steps:
      - darkcheckout
      - auth-with-gcp: { background: false }
      - run: scripts/deployment/deploy-lock-one-add
      - slack-notify-job-failure
      - deploy-lock-remove-on-fail

  deploy:
    executor: in-container
    steps:
      - darkcheckout
      - setup-app
      - run: scripts/build/compile-project shipit
      - auth-with-gcp: { background: false }
      - attach_workspace: { at: "." }
      - show-large-files-and-directories
      # deploy lock is removed as part of the gke-deploy script
      - run: scripts/deployment/gke-deploy --manifest=gcr-image-ids.json
      - slack-notify-deploy
      - deploy-lock-remove-on-fail

  notify-non-deploy:
    executor: simple-executor
    steps:
      - slack-notify-build

workflows:
  version: 2
  build-and-deploy:
    jobs:
      # initial builds & tests
      - static-checks
      - predeployment-checks:
          filters:
            branches:
              ignore: /^(pull\/).*$/
      - build-backend

      - gcp-containers-test:
          filters:
            branches:
              ignore: main
          requires:
            - build-backend

      # pre-deploy, in parallel with integration-tests
      - push-containers-to-gcp:
          filters:
            branches:
              only: main
          requires:
            - build-backend

      # actual deploy
      - deploy:
          filters:
            branches:
              only: main
          requires:
            - deploy-lock
            - push-containers-to-gcp
            - static-checks
            - predeployment-checks

      - deploy-lock:
          filters:
            branches:
              only: main

      - notify-non-deploy:
          filters:
            branches:
              ignore: main
          requires:
            - build-backend
            - gcp-containers-test
            - static-checks
            - predeployment-checks
