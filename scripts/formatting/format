#! /usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

set -euo pipefail

CHECK=255 # (0 mean check, 1 means format, 255 means error)
OCAML=0 # (0 means check ocaml files, 1 means don't)
FILES=()

# rescript files aren't checked/formatted by default since it has a dependency
# on `bs-platform`, which not all usages (i.e. CI) have in context.

#######################
# --help
#######################
function print_help ()
{
	printf '%s\n' "All formatting across Dark"
	printf 'Usage: %s [check|format] <files|dirs...> [--help] \n' "$0"
	printf '\t%s\n' "check: Error if files are not formatted. No argument means check all files. Does not error if file is not supported."
	printf '\t%s\n' "format: Format file or dir. Formats all files with no argument. Does not error or format if file is not supported."
  printf '\t%s\n' "--ocaml-only: Only check ocaml files (mli, ml)"
}

FILES=()

# check for flags
for val in "${@}"; do
  case "$val" in
    --help)
        print_help
        exit 0
        ;;
    check)
      CHECK=0
      ;;
    format)
      CHECK=1
      ;;
    *)
      FILES+=("$val")
      ;;
  esac
done

if [[ 255 -eq "$CHECK" ]]; then
  echo -e "usage:\n  ./scripts/formatting/format check [files]\n  ./scripts/formatting/format format [files]"
  exit 255
fi

#######################
# Parse rest of arguments
#######################
if [[ ${#FILES[@]} -eq 0 ]]; then
  FILES=(".")
fi

#######################
# functions
#######################
is_dir() {
  [[ -d "$1" ]]
}

is_ocaml() {
  [[ $1 == *.mli || $1 == *.ml ]]
}

is_allowed() {
  [[ $1 == *.mli || $1 == *.ml ]]
}

all_ocaml_files() {
  find "$1" \
    \( -path ".git" \
    -o -path "_build" \
    -o -path "./_build" \
    -o -path "node_modules" \
    -o -path "./node_modules" \
    -o -path "integration-tests/node_modules" \
    -o -path "./integration-tests/node_modules" \
    -o -path "_esy" \
    -o -path "./_esy" \
    -o -path "/home/dark/.esy" \
    -o -path "esy.lock" \
    -o -path "fsharp-backend" \
    \) -prune -false \
    \
    -o -type f \
    \( -name "*.ml" \
    -o -name "*.mli" \
    \) -print0
}

check_ocamlformat() {
  xargs -0 ocamlformat --check
}

format_ocamlformat() {
  xargs -0 ocamlformat --inplace
}

do_ocamlformat() {
  if [[ 0 -eq "$CHECK" ]]; then
    check_ocamlformat
  else
    format_ocamlformat
  fi
}

# TODO sqlfmt for sql
# TODO add python
# TODO bash formatter

#######################
# action files/dirs
#######################
for i in "${FILES[@]}"; do
  if [[ -d "$i" ]]; then
    if [[ 0 -eq "$OCAML" ]]; then
      all_ocaml_files "$i" | do_ocamlformat
    fi
  elif is_allowed "$i"; then
    if is_ocaml "$i"; then
      if [[ 0 -eq "$OCAML" ]]; then
        echo "$i" | do_ocamlformat
      fi
    fi
  else
    echo "ignored : $i"
  fi
done

